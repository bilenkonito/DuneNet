<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuneNet.Client</name>
    </assembly>
    <members>
        <member name="T:DuneNet.Client.Controllers.EntityController">
            <inheritdoc />
            <summary>
            An Entity Controller with extra functionality for the client.
            </summary>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.GetEntityInfo(System.String)">
            <summary>
            Returns the registration information of the entity identified by its registration name.
            </summary>
            <param name="name">The registration name of the entity.</param>
            <returns>
            If the requested entity was found, an EntityInfo instance containing the information of the registered entity.
            Null if the requested entity was not found.
            </returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.SpawnEntity(System.Nullable{System.UInt32},System.String,System.Boolean,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawns an entity in the current scene.
            </summary>
            <param name="entId">The id of the entity to spawn. If null, the entity will be clientside.</param>
            <param name="entName">The registration name of the entity to spawn.</param>
            <param name="hasAuthority">The authority of the entity to spawn. True if the entity will have local authority, False otherwise.</param>
            <param name="entPos">The initial position of the entity to spawn.</param>
            <param name="entRot">The initial rotation of the entity to spawn.</param>
            <returns>An instance of Entity representing the spawned entity.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.DestroyEntity(DuneNet.Client.Entities.Entity)">
            <summary>
            Destroys a spawned entity.
            </summary>
            <param name="ent">The entity to destroy.</param>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.DestroyAllEntities">
            <summary>
            Destroys all spawned entities.
            </summary>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.GetEntityFromId(System.UInt32)">
            <summary>
            Returns a spawned entity identified by its ID.
            </summary>
            <remarks>
            Only returns networked entities.
            </remarks>
            <param name="entId">The id of the entity to find.</param>
            <returns>An instance of Entity representing the requested entity. Null if no such entity was found.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.GetEntities``1">
            <summary>
            Returns all the spawned entities of the type specified.
            </summary>
            <typeparam name="T">The type of the entities to find. Must inherit from Entity</typeparam>
            <returns>An IEnumerable instance of type T containing all the spawned entities of that type.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.EntityController.GetEntities">
            <summary>
            Returns all the spawned entities.
            </summary>
            <returns>An IEnumerable instance of type Entity containing all the spawned entities.</returns>
        </member>
        <member name="T:DuneNet.Client.Controllers.EventController">
            <inheritdoc />
            <summary>
            An Event Controller with extra functionality for the client.
            </summary>
        </member>
        <member name="M:DuneNet.Client.Controllers.EventController.InvokeEvent(System.String,DuneNet.Shared.Events.EventArguments,System.Boolean)">
            <summary>
            Invokes the target clientside event. 
            </summary>
            <param name="eventName">The registration name of the event to invoke.</param>
            <param name="eventArguments">The arguments the event will be invoked with. Must not be null but can contain no set variables.</param>
            <param name="invokeOnServer">Whether the event should be networked. True if the event should be called on the server, False otherwise.</param>
        </member>
        <member name="T:DuneNet.Client.Controllers.NetworkController">
            <summary>
            A Network Controller with extra functionality for the client.
            </summary>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.Init(UnityEngine.Networking.GlobalConfig,UnityEngine.Networking.ConnectionConfig,System.Int32,System.Single)">
            <summary>
            Initializes the Network Controller.
            </summary>
            <remarks>
            Must be called before using any of the Network Controller's functionality.
            </remarks>
            <param name="globalConfig">The global configuration to use for the Network Controller.</param>
            <param name="connectionConfig">The connection configuration to use for the Network Controller.</param>
            <param name="maxConnections">The maximum amount of connections the Network Controller will handle at the same time. 1 connection is usually enough for most cases.</param>
            <param name="maxDelay">The maximum delay before sending packets on connections. Setting this to zero will send messages as soon as they are ready instead of aggregating them.</param>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.Connect(System.String,System.Int32)">
            <summary>
            Connects to a serverside Network Controller.
            </summary>
            <remarks>
            This is an asynchronous operation whose results can be hooked into by using a DuneModule or by listening for the following events:
            <list type="bullet">
                <item>OnClientConnect. Event Variables: None
                </item>
                <item>OnClientDisconnect. Event Variables: None
                </item>
                <item>OnClientErrorTimeout. Event Variables: None
                </item>
                <item>OnClientErrorBadMessage. Event Variables: None
                </item>
                <item>OnClientErrorDNSFailure. Event Variables: None
                </item>
                <item>OnClientErrorGeneric. Event Variables:
                    <list type="bullet"> 
                        <item>(NetworkError) networkError = The error code.</item> 
                    </list>
                </item>
                <item>OnClientAuthenticationSuccess. Event Variables: None
                </item>
                <item>OnClientAuthenticationError. Event Variables: None
                </item>
            </list>
            </remarks>
            <param name="ip">The IP of the serverside Network Controller to connect to.</param>
            <param name="port">The port of the serverside Network Controller to connect to.</param>
            <returns>
            True if the Network Controller was able to start the connection process, 
            False otherwise (for example, if the client was already trying to establish a connection or was already connected).
            </returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.Disconnect">
            <summary>
            Disconnects the Network Controller.
            </summary>
            <remarks>
            If no connetion was established when called but the Network Controller was trying to do so, it will stop attempting the connection (this case will not invoke the OnClientDisconnect event).
            </remarks>
            <returns>
            True if the Network Controller was able to disconnect, 
            False otherwise (for example, if the client was not connected).
            </returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.Shutdown">
            <summary>
            Shuts down the Network Controller. Init must be called again to perform further operations with the Network Controller after calling this.
            </summary>
            <remarks>
            There should be no need to manually call this in most cases as it is already automatically called on application quit.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.IsConnected">
            <summary>
            Returns whether the Network Controller is currently connected to a serverside Network Controller.
            </summary>
            <returns>True if the Network Controller is connected, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.IsConnecting">
            <summary>
            Returns whether the Network Controller is currently attempting to establish a connection.
            </summary>
            <returns>True if the Network Controller is attempting a connection, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.IsAuthenticated">
            <summary>
            Returns whether the Network Controller has successfully authenticated with a serverside Network Controller.
            </summary>
            <remarks>
            It is preferable to use a DuneModule or the events OnClientAuthenticationSuccess and OnClientAuthenticationError to handle authentication rather than using this method. 
            </remarks>
            <returns>True if the Network Controller is authenticated, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.SetReady">
            <summary>
            Sets the Network Controller ready.
            </summary>
            <remarks>
            This instructs the receiving serverside Network Controller that this Network Controller is ready to receive scene information.
            This method has no effect until the Network Controller has been authenticated with the serverside Network Controller or if the Network Controller is not connected.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.SetNotReady">
            <summary>
            Sets the Network Controller not ready.
            </summary>
            <remarks>
            This instructs the receiving serverside Network Controller that this Network Controller is not ready to receive scene information (useful for changing scenes).
            This method has no effect until the Network Controller has been authenticated with the serverside Network Controller or if the Network Controller is not connected.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.IsReady">
            <summary>
            Returns whether the Network Controller is ready.
            </summary>
            <returns>True if the Network Controller is ready, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.GetLocalConnection">
            <summary>
            Returns the local connection of the Network Controller.
            </summary>
            <returns>A DuneConnection instance representing the connection used by the Network Controller to communicate with a server.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.GetRemoteDelayTimeMs(System.Int32,System.Byte@)">
            <summary>
            Calculates the delay of the provided timestamp for the current connection.
            </summary>
            <remarks>
            This is useful for time sensitive operations between the client and the server such as movement synchronization and some types of authentication.
            </remarks>
            <param name="remoteTime">Timestamp received from the server.</param>
            <param name="error">A byte representing any error during the delay calculation (can be casted to NetworkError for more information). Null if no errors occurred.</param>
            <returns>The delay between the client and the server.</returns>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
            <summary>
            Registers a network message handler.
            </summary>
            <param name="msgType">The type of the message to register. This must be unique for each message type.</param>
            <param name="handler">The handler that the Network Controller will invoke when a message of this type is received.</param>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.SendByChannelToServer(System.Int16,UnityEngine.Networking.MessageBase,System.Int16)">
            <summary>
            Sends a message to the server using the provided channel.
            </summary>
            <remarks>
            The channel must have been previously been manually registered or be one of the default channels from MessageChannels.
            </remarks>
            <param name="msgType">The type of the message to send.</param>
            <param name="msg">The message to send.</param>
            <param name="channel">The channel to send the message through.</param>
        </member>
        <member name="M:DuneNet.Client.Controllers.NetworkController.Dispose">
            <summary>
            Disposes the Network Controller and frees any resources internally used by it.
            </summary>
            <remarks>
            There should be no need to manually call this in most cases as it is already automatically called on application quit.
            </remarks>
        </member>
        <member name="T:DuneNet.Client.DuneBehaviour">
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A Behaviour not bound to a GameObject that can receive Events.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneBehaviour.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="T:DuneNet.Client.DuneClient">
            <summary>
            A toolbox class to access DuneNet's client functionality.
            </summary>
        </member>
        <member name="P:DuneNet.Client.DuneClient.NetworkController">
            <summary>
            The client NetworkController.
            </summary>
        </member>
        <member name="P:DuneNet.Client.DuneClient.EntityController">
            <summary>
            The client EntityController.
            </summary>
        </member>
        <member name="P:DuneNet.Client.DuneClient.EventController">
            <summary>
            The client EventController.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneClient.Use(DuneNet.Client.DuneModule)">
            <summary>
            Adds a DuneModule to the client module chain.
            </summary>
            <remarks>
            Only one instance of each module type is allowed to be registered at the same time.
            Modules are chained in the order they are added.
            </remarks>
            <param name="module">The module to add to the module chain.</param>
        </member>
        <member name="M:DuneNet.Client.DuneClient.StopUsing(DuneNet.Client.DuneModule)">
            <summary>
            Removes a DuneModule from the client module chain.
            </summary>
            <remarks>
            When a module is removed, the next module to the one being removed is chained to the previous one.
            </remarks>
            <param name="module">The module to remove from the module chain.</param>
        </member>
        <member name="M:DuneNet.Client.DuneClient.GetModule``1">
            <summary>
            Returns the specified module type from the client module chain.
            </summary>
            <remarks>
            Since only one instance of each module type is allowed to be registered at the same time, this will only return a single result.
            </remarks>
            <typeparam name="T">The type of the module to obtain.</typeparam>
            <returns>The requested module if a match was found, null otherwise.</returns>
        </member>
        <member name="T:DuneNet.Client.DuneModule">
            <inheritdoc />
            <summary>
            A client module to easily hook into DuneNet's client functionality.
            </summary>
            <remarks>
            This is the preferable way to extend DuneNet's functionality.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnUse">
            <summary>
            Overridable method called when the module is added to the module chain.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnStopUsing">
            <summary>
            Overridable method called when the module is removed from the module chain.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnUpdate">
            <summary>
            Overridable method called every frame.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnSendHandshake(DuneNet.Shared.Modules.HandshakeRequest)">
            <summary>
            Overridable method called when the client is expected to send its authentication request to the server.
            </summary>
            <remarks>
            Since modules are chained together, multiple modules can be used to generate the final HandshakeRequest by modifying the previous HandshakeRequest and returning it. 
            </remarks>
            <param name="previous">The HandshakeRequest received from the previous module. This is never null but it may contain empty elements if this is the first module of the chain.</param>
            <returns>A HandshakeRequest instance to be passed onto the next module of the chain.</returns>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnHandshakeSuccessful(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the server accepted the authentication request.
            </summary>
            <param name="conn">The connection that performed the authentication.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnHandshakeError(DuneNet.Shared.DuneConnection,System.String)">
            <summary>
            Overridable method called when the server rejects the authentication request.
            </summary>
            <param name="conn">The connection that performed the authentication.</param>
            <param name="error">The descriptive error the server provided as a reason for rejecting the authentication.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetConnected(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController connects to a server.
            </summary>
            <param name="conn">The connection that got connected.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetDisconnected(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController disconnects from a server.
            </summary>
            <param name="conn">The connection that got disconnected.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetTimeout(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController's connection to a server times out.
            </summary>
            <param name="conn">The connection the error occurred in.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetBadMessage(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController gets disconnected from the server because a message was invalid.
            </summary>
            <param name="conn">The connection the error occurred in.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetDnsFailure(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController cannot resolve the FQDN provided for the connection.
            </summary>
            <param name="conn">The connection the error occurred in.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetErrorUnknown(DuneNet.Shared.DuneConnection,UnityEngine.Networking.NetworkError)">
            <summary>
            Overridable method called when the NetworkController experiences an unknown connection error.
            </summary>
            <param name="conn">The connection the error occurred in.</param>
            <param name="error">The connection error.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController is set ready by the server.
            </summary>
            <param name="conn">The connection that was set ready.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.OnNetNotReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the NetworkController is set not ready by the server.
            </summary>
            <param name="conn">The connection that was set not ready.</param>
        </member>
        <member name="M:DuneNet.Client.DuneModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="T:DuneNet.Client.DuneMonoBehaviour">
            <inheritdoc cref="T:UnityEngine.MonoBehaviour" />
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A MonoBehaviour wrapper that can receive Events.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneMonoBehaviour.OnAwake">
            <summary>
            Overridable method called when the instance is being loaded.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneMonoBehaviour.OnStart">
            <summary>
            Overridable method called on the frame when the instance is enabled just before any of the Update methods is called the first time.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneMonoBehaviour.OnUpdate">
            <summary>
            Overridable method called called every frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneMonoBehaviour.OnFixedUpdate">
            <summary>
            Overridable method called every fixed framerate frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="M:DuneNet.Client.DuneMonoBehaviour.OnLateUpdate">
            <summary>
            Overridable method called every frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="T:DuneNet.Client.Entities.Entity">
            <inheritdoc cref="T:DuneNet.Shared.Entities.BaseEntity" />
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A client entity.
            </summary>
        </member>
        <member name="P:DuneNet.Client.Entities.Entity.HasAuthority">
            <summary>
            True if the entity has local authority, False otherwise.
            </summary>
        </member>
        <member name="P:DuneNet.Client.Entities.Entity.StateCount">
            <summary>
            The amount of movement states that have not been processed yet.
            </summary>
            <remarks>
            This will always be Zero if the entity is clientside or its movement is not being synchronized.
            </remarks>
        </member>
        <member name="P:DuneNet.Client.Entities.Entity.UMessages">
            <summary>
            A dictionary containing all the current User Messages and their values.
            </summary>
            <remarks>
            Used for display and debug purposes. For normal operation, use SetUMessage and GetUMessage.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.GetNetworkedVar``1(System.String)">
            <summary>
            Returns the specified Networked Variable's value.
            </summary>
            <remarks>
            Networked Variables are unidirectional: they are set by the server and synchronized to all clients that can observe the entity.
            </remarks>
            <param name="varName">The name of the Networked Variable to obtain.</param>
            <typeparam name="T">The type of the Networked Variable to obtain. It must flagged as Serializable.</typeparam>
            <returns>An instance of type T representing the value of the Networked Variable. If the Networked Variable does not exist, the default value of T is returned instead.</returns>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.SetUMessage(System.String,System.Object)">
            <summary>
            Sets the specified User Message's value.
            </summary>
            <remarks>
            User Messages are unidirectional: they are set by a client and synchronized to the server. 
            Only clients with authority over the entity may set its User Messages. 
            Clientside entities do not support User Messages since they are not networked. 
            </remarks>
            <param name="varName">The name of the User Message to set.</param>
            <param name="value">The value to set the User Message to.</param>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.GetUMessage``1(System.String)">
            <summary>
            Returns the specified User Message's value.
            </summary>
            <remarks>
            User Messages are unidirectional: they are set by a client and synchronized to to the server. 
            Only clients with authority over the entity may set its User Messages. 
            Clientside entities do not support User Messages since they are not networked. 
            </remarks>
            <param name="varName">The name of the User Message to obtain.</param>
            <typeparam name="T">The type of the User Message to obtain. It must flagged as Serializable.</typeparam>
            <returns>An instance of type T representing the value of the User Message. If the User Message does not exist, the default value of T is returned instead.</returns>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.SetPos(UnityEngine.Vector3)">
            <summary>
            Sets the position of the entity.
            </summary>
            <param name="position">The position to set the entity to.</param>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.SetRot(UnityEngine.Quaternion)">
            <summary>
            Sets the rotation of the entity.
            </summary>
            <param name="rotation">The rotation to set the entity to.</param>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.SetParent(DuneNet.Shared.Entities.BaseEntity)">
            <summary>
            Sets the parent of the entity.
            </summary>
            <param name="newParent">The entity the parent will be se to.</param>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.OnNetUpdate">
            <summary>
            Overridable method called once every network update. 
            </summary>
            <remarks>
            How often this method gets called depends on the network tickrate of the entity (by default, 33 times per second).
            This method is called before any synchronization takes place.
            The entity should update its User Messages here since this is the fastest they will be synchronized.
            </remarks>
        </member>
        <member name="M:DuneNet.Client.Entities.Entity.OnSetNetVar(System.String)">
            <summary>
            Overridable method called when the server updates any of the Networked Variables of the entity.
            </summary>
            <remarks>
            For entities with a large amount of Networked Variables, it is advisable to switch over varName.
            </remarks>
            <param name="varName">The name of the Networked Variable that was received from the server.</param>
        </member>
        <member name="T:DuneNet.Client.Modules.DisconnectModule">
            <inheritdoc />
            <summary>
            A basic DuneModule to handle client disconnections from the server.
            </summary>
        </member>
    </members>
</doc>
