<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuneNet.Server</name>
    </assembly>
    <members>
        <member name="T:DuneNet.Server.Controllers.EntityController">
            <inheritdoc />
            <summary>
            An Entity Controller with extra functionality for the server.
            </summary>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.GetEntityInfo(System.String)">
            <summary>
            Returns the registration information of the entity identified by its registration name.
            </summary>
            <param name="name">The registration name of the entity.</param>
            <returns>
            If the requested entity was found, an EntityInfo instance containing the information of the registered entity.
            Null if the requested entity was not found.
            </returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.SpawnEntity(System.String,DuneNet.Shared.DuneConnection,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawns an entity in the current scene.
            </summary>
            <param name="entName">The registration name of the entity to spawn.</param>
            <param name="authorityConnection">The connection that will have authority over the entity to spawn. If Null, the server will keep authority over it.</param>
            <param name="entPos">The initial position of the entity to spawn.</param>
            <param name="entRot">The initial rotation of the entity to spawn.</param>
            <returns>An instance of Entity representing the spawned entity.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.DestroyEntity(DuneNet.Server.Entities.Entity)">
            <summary>
            Destroys a spawned entity.
            </summary>
            <param name="ent">The enttiy to destroy.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.DestroyAllEntities">
            <summary>
            Destroys all spawned entities.
            </summary>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.GetEntityFromId(System.UInt32)">
            <summary>
            Returns a spawned entity identified by its id.
            </summary>
            <param name="entId">The id of the entity to find.</param>
            <returns>An instance of Entity representing the requested entity. Null if no such entity was found.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.GetEntities``1">
            <summary>
            Returns all the spawned entities of the type specified.
            </summary>
            <typeparam name="T">The type of the entities to find. Must inherit from Entity</typeparam>
            <returns>An IEnumerable instance of type T containing all the spawned entities of that type.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.GetEntities">
            <summary>
            Returns all the spawned entities.
            </summary>
            <returns>An IEnumerable instance of type Entity containing all the spawned entities.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.EntityController.GetEntitiesForAuthority(UnityEngine.Networking.NetworkConnection)">
            <summary>
            Returns all the spawned entities the provided connection has authority over.
            </summary>
            <param name="conn">The authoritative connection for the requested entities.</param>
            <returns>An IEnumerable instance of type Entity containing all the spawned entities.</returns>
        </member>
        <member name="T:DuneNet.Server.Controllers.EventController">
            <inheritdoc />
            <summary>
            An Event Controller with extra functionality for the server.
            </summary>
        </member>
        <member name="M:DuneNet.Server.Controllers.EventController.InvokeEvent(System.String,DuneNet.Shared.Events.EventArguments,System.Boolean)">
            <summary>
            Invokes the target serverside event. 
            </summary>
            <param name="eventName">The registration name of the event to invoke.</param>
            <param name="eventArguments">The arguments the event will be invoked with. Must not be null but can contain no set variables.</param>
            <param name="invokeOnClient">Whether the event should be networked. True if the event should be called on clients, False otherwise.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.EventController.InvokeEvent(System.String,DuneNet.Shared.Events.EventArguments,DuneNet.Shared.DuneConnection)">
            <summary>
            Invokes the target clientside event on the provided client.
            </summary>
            <remarks>
            This method does NOT invoke the target event on the server. This method, therefore, works similar to a global scope RPC.
            </remarks>
            <param name="eventName">The registration name of the event to invoke.</param>
            <param name="eventArguments">The arguments the event will be invoked with. Must not be null but can contain no set variables.</param>
            <param name="targetClientConnection">The connection to invoke the event on.</param>
        </member>
        <member name="T:DuneNet.Server.Controllers.NetworkController">
            <summary>
            A Network Controller with extra functionality for the server.
            </summary>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.Init(UnityEngine.Networking.GlobalConfig,UnityEngine.Networking.ConnectionConfig,System.Int32,System.Single)">
            <summary>
            Initializes the Network Controller.
            </summary>
            <remarks>
            Must be called before using any of the Network Controller's functionality.
            </remarks>
            <param name="globalConfig">The global configuration to use for the Network Controller.</param>
            <param name="connectionConfig">The connection configuration to use for the Network Controller.</param>
            <param name="maxConnections">The maximum amount of connections the Network Controller will handle at the same time.
            One connection is required per client so this normally equals the maximum amount of clients the Network Controller will be able to handle at the same time.
            This value should be higher than the amount of expected clients and the maximum amount of clients manually restricted with a DuneModule or by listening for the OnServerConnect event.</param>
            <param name="maxDelay">The maximum delay before sending packets on connections. Setting this to zero will send messages as soon as they are ready instead of aggregating them.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.Listen(System.String,System.Int32)">
            <summary>
            Listens for connections on the supplied endpoint.
            </summary>
            <remarks>
            After listening, the network interactions can be hooked into by using a DuneModule or by listening for the following events:
            <list type="bullet">
                <item>OnServerConnect. Event Variables:
                    <list type="bullet"> 
                        <item>(int) connection = The ID of the connection that invoked the event.</item> 
                    </list>
                </item>
                <item>OnServerDisconnect. Event Variables:
                    <list type="bullet"> 
                        <item>(int) connection = The ID of the connection that invoked the event.</item> 
                    </list>
                </item>
                <item>OnServerError. Event Variables:
                    <list type="bullet">
                        <item>(int) connection = The ID of the connection that invoked the event.</item> 
                        <item>(NetworkError) networkError = The error code.</item> 
                    </list>
                </item>
                <item>OnServerAuthenticationSuccess. Event Variables:
                    <list type="bullet"> 
                        <item>(int) connection = The ID of the connection that invoked the event.</item> 
                    </list>
                </item>
                <item>OnServerAuthenticationError. Event Variables:
                    <list type="bullet"> 
                        <item>(int) connection = The ID of the connection that invoked the event.</item> 
                    </list>
                </item>
            </list>
            </remarks>
            <param name="ip">The IP Network Controller should listen on.</param>
            <param name="port">The port the Network Controller should listen on.</param>
            <returns>
            True if the Network Controller was able to start listening at the provided endpoint, 
            False otherwise (for example, if the IP is not valid or the endpoint is already in use by another process).
            </returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.Disconnect">
            <summary>
            Stops listening.
            </summary>
            <returns>
            True if the Network Controller was able to stop listening, 
            False otherwise (for example, if the server was not listening).
            </returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.Shutdown">
            <summary>
            Shuts down the Network Controller. Init must be called again to perform further operations with the Network Controller after calling this.
            </summary>
            <remarks>
            There should be no need to manually call this in most cases as it is already automatically called on application quit.
            </remarks>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.IsListening">
            <summary>
            Returns whether the Network Controller is currently listening.
            </summary>
            <returns>True if the Network Controller is listening, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.GetListenPort">
            <summary>
            Returns the port the Network Controller is currently listening on.
            </summary>
            <returns>The port the server is listening on if the server is listening, -1 otherwise</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.SetReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Sets the provided connection ready.
            </summary>
            <remarks>
            This instructs the receiving clientside Network Controller that it should be able to receive scene information.
            This method has no effect until the client has been authenticated.
            </remarks>
            <param name="conn">The connection to set ready.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.SetNotReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Sets the provided connection not ready.
            </summary>
            <remarks>
            This instructs the receiving clientside Network Controller that it should not be able to receive scene information (useful for changing scenes).
            This method has no effect until the client has been authenticated.
            </remarks>
            <param name="conn">The connection to set not ready.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.IsReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Returns whether the provided connection is ready.
            </summary>
            <returns>True if the provided connection is ready, False otherwise.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.ForceServerReadiness(DuneNet.Shared.DuneConnection)">
            <summary>
            Prevents the provided connection from controlling its own readiness.
            </summary>
            <remarks>
            This is useful for preventing clients from setting theirselves ready and unready when they are not supposed to.
            </remarks>
            <param name="conn">The connection to force readiness on.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.AllowLocalReadiness(DuneNet.Shared.DuneConnection)">
            <summary>
            Allows the provided connection to control its own readiness.
            </summary>
            <remarks>
            This is useful to allow clients to set theirselves ready and unready, for example, to indicate the loading state of a scene change.
            </remarks>
            <param name="conn">The connection to allow local readiness control on.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.GetConnectionFromId(System.Int32)">
            <summary>
            Returns a connection identified by the provided ID.
            </summary>
            <param name="connectionId">The ID of the connection to retrieve</param>
            <returns>A DuneConnection instance representing the requested connection.</returns>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.KickConnection(UnityEngine.Networking.NetworkConnection)">
            <summary>
            Kicks a connection.
            </summary>
            <remarks>
            This forcefuly disconnects the provided connection after one second. This delay allows for graceful disconnection messages to be sent before the connetion is closed.
            </remarks>
            <param name="conn">The connection to kick.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
            <summary>
            Registers a network message handler.
            </summary>
            <param name="msgType">The type of the message to register. This must be unique for each message type.</param>
            <param name="handler">The handler that the Network Controller will invoke when a message of this type is received.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.SendByChannelToReady(System.Int16,UnityEngine.Networking.MessageBase,System.Int16)">
            <summary>
            Sends a message to all ready clients using the provided channel.
            </summary>
            <remarks>
            The channel must have been previously been manually registered or be one of the default channels from MessageChannels.
            </remarks>
            <param name="msgType">The type of the message to send.</param>
            <param name="msg">The message to send.</param>
            <param name="channel">The channel to send the message through.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.SendByChannelToReadyWithAuthority(System.Int16,UnityEngine.Networking.NetworkConnection,DuneNet.Shared.Messages.SharedAuthorityMessage,System.Int16)">
            <summary>
            Sends a message to all ready clients using the provided channel. Additionally, it sets the authority of the message to the provided connection before sending it.
            </summary>
            <remarks>
            The channel must have been previously been manually registered or be one of the default channels from MessageChannels.
            This method is specially useful for custom messages that deal with authority entities.
            </remarks>
            <param name="msgType">The type of the message to send.</param>
            <param name="authoritativeConnection">The connection that will have authority over the message.</param>
            <param name="msg">The message to send.</param>
            <param name="channel">The channel to send the message through.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.ForEachConnection(System.Action{DuneNet.Shared.DuneConnection})">
            <summary>
            Performs the provided action for each valid connection.
            </summary>
            <remarks>
            This method skips the default server connection, which is always equal to null.
            </remarks>
            <param name="action">The action to perform for each connection.</param>
        </member>
        <member name="M:DuneNet.Server.Controllers.NetworkController.Dispose">
            <summary>
            Disposes the Network Controller and frees any resources internally used by it.
            </summary>
            <remarks>
            There should be no need to manually call this in most cases as it is already automatically called on application quit.
            </remarks>
        </member>
        <member name="T:DuneNet.Server.DuneBehaviour">
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A Behaviour not bound to a GameObject that can receive Events.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneBehaviour.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="T:DuneNet.Server.DuneModule">
            <inheritdoc />
            <summary>
            A server module to easily hook into DuneNet's server functionality.
            </summary>
            <remarks>
            This is the preferable way to extend DuneNet's functionality.
            </remarks>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnUse">
            <summary>
            Overridable method called when the module is added to the module chain.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnStopUsing">
            <summary>
            Overridable method called when the module is removed from the module chain.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnUpdate">
            <summary>
            Overridable method called every frame.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnRespondHandshake(DuneNet.Shared.Modules.HandshakeResponse,System.String,System.Byte[])">
            <summary>
            Overridable method called when the server is expected to respond to a client's authentication request.
            </summary>
            <remarks>
            Since modules are chained together, multiple modules can be used to generate the final HandshakeResponse by modifying the previous HandshakeResponse and returning it. 
            </remarks>
            <param name="previous">The HandshakeResponse received from the previous module. This is never null but it may contain empty elements if this is the first module of the chain.</param>
            <param name="idToken">The authentication token received from the client.</param>
            <param name="secret">The authentication secret received from the client.</param>
            <returns>A HandshakeResponse instance to be passed onto the next module of the chain.</returns>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnHandshakeSuccessful(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the server accepted the authentication request of a client.
            </summary>
            <param name="conn">The connection of the authenticated client.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnHandshakeError(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when the server rejected the authentication request of a client.
            </summary>
            <param name="conn">The connection of the rejected client.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnNetConnected(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when a client connects to the NetworkController.
            </summary>
            <param name="conn">The connection that got connected.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnNetDisconnected(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when a client disconnects from the NetworkController.
            </summary>
            <param name="conn">The connection that got disconnected.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnNetError(DuneNet.Shared.DuneConnection,UnityEngine.Networking.NetworkError)">
            <summary>
            Overridable method called when the NetworkController experiences a connection error.
            </summary>
            <param name="conn">The connection the error occurred in.</param>
            <param name="error">The connection error.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnNetReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when a client sets itself ready.
            </summary>
            <param name="conn">The connection that was set ready.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.OnNetNotReady(DuneNet.Shared.DuneConnection)">
            <summary>
            Overridable method called when a client sets itself not ready.
            </summary>
            <param name="conn">The connection that was set not ready.</param>
        </member>
        <member name="M:DuneNet.Server.DuneModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="T:DuneNet.Server.DuneMonoBehaviour">
            <inheritdoc cref="T:UnityEngine.MonoBehaviour" />
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A MonoBehaviour wrapper that can receive Events.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneMonoBehaviour.OnAwake">
            <summary>
            Overridable method called when the instance is being loaded.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneMonoBehaviour.OnStart">
            <summary>
            Overridable method called on the frame when the instance is enabled just before any of the Update methods is called the first time.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneMonoBehaviour.OnUpdate">
            <summary>
            Overridable method called called every frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneMonoBehaviour.OnFixedUpdate">
            <summary>
            Overridable method called every fixed framerate frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneMonoBehaviour.OnLateUpdate">
            <summary>
            Overridable method called every frame, if the DuneMonobehaviour is enabled.
            </summary>
        </member>
        <member name="T:DuneNet.Server.DuneServer">
            <summary>
            A toolbox class to access DuneNet's server functionality.
            </summary>
        </member>
        <member name="P:DuneNet.Server.DuneServer.NetworkController">
            <summary>
            The server NetworkController.
            </summary>
        </member>
        <member name="P:DuneNet.Server.DuneServer.EntityController">
            <summary>
            The server EntityController.
            </summary>
        </member>
        <member name="P:DuneNet.Server.DuneServer.EventController">
            <summary>
            The server EventController.
            </summary>
        </member>
        <member name="M:DuneNet.Server.DuneServer.Use(DuneNet.Server.DuneModule)">
            <summary>
            Adds a DuneModule to the server module chain.
            </summary>
            <remarks>
            Only one instance of each module type is allowed to be registered at the same time.
            Modules are chained in the order they are added.
            </remarks>
            <param name="module">The module to add to the module chain.</param>
        </member>
        <member name="M:DuneNet.Server.DuneServer.StopUsing(DuneNet.Server.DuneModule)">
            <summary>
            Removes a DuneModule from the server module chain.
            </summary>
            <remarks>
            When a module is removed, the next module to the one being removed is chained to the previous one.
            </remarks>
            <param name="module">The module to remove from the module chain.</param>
        </member>
        <member name="M:DuneNet.Server.DuneServer.GetModule``1">
            <summary>
            Returns the specified module type from the client module chain.
            </summary>
            <remarks>
            Since only one instance of each module type is allowed to be registered at the same time, this will only return a single result.
            </remarks>
            <typeparam name="T">The type of the module to obtain.</typeparam>
            <returns>The requested module if a match was found, null otherwise.</returns>
        </member>
        <member name="T:DuneNet.Server.Entities.Entity">
            <inheritdoc cref="T:DuneNet.Shared.Entities.BaseEntity" />
            <inheritdoc cref="T:DuneNet.Shared.Events.IEventCompatible" />
            <summary>
            A server entity.
            </summary>
        </member>
        <member name="P:DuneNet.Server.Entities.Entity.NetworkedPositionAndRotation">
            <summary>
            Whether the movement of the entity should be synchronized.
            </summary>
        </member>
        <member name="P:DuneNet.Server.Entities.Entity.AuthorityConnection">
            <summary>
            The connection that has authority over the entity.
            </summary>
        </member>
        <member name="P:DuneNet.Server.Entities.Entity.NetVars">
            <summary>
            A dictionary containing all the current Networked Variables and their values.
            </summary>
            <remarks>
            Used for display and debug purposes. For normal operation, use SetNetworkedVar and GetNetworkedVar.
            </remarks>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.SetNetworkedVar(System.String,System.Object)">
            <summary>
            Sets the specified Networked Variable's value.
            </summary>
            <remarks>
            Networked Variables are unidirectional: they are set by the server and synchronized to all clients that can observe the entity.  
            </remarks>
            <param name="varName">The name of the Networked Variable to set.</param>
            <param name="value">The value to set the Networked Variable to.</param>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.GetNetworkedVar``1(System.String)">
            <summary>
            Returns the specified Networked Variable's value.
            </summary>
            <remarks>
            Networked Variables are unidirectional: they are set by the server and synchronized to all clients that can observe the entity.
            </remarks>
            <param name="varName">The name of the Networked Variable to obtain.</param>
            <typeparam name="T">The type of the Networked Variable to obtain. It must flagged as Serializable.</typeparam>
            <returns>An instance of type T representing the value of the Networked Variable. If the Networked Variable does not exist, the default value of T is returned instead.</returns>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.GetUMessage``1(System.String)">
            <summary>
            Returns the specified User Message's value.
            </summary>
            <remarks>
            User Messages are unidirectional: they are set by a client and synchronized to to the server. 
            Only clients with authority over the entity may set its User Messages. 
            </remarks>
            <param name="varName">The name of the User Message to obtain.</param>
            <typeparam name="T">The type of the User Message to obtain. It must flagged as Serializable.</typeparam>
            <returns>An instance of type T representing the value of the User Message. If the User Message does not exist, the default value of T is returned instead.</returns>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.SendEntityToConnection(DuneNet.Shared.DuneConnection)">
            <summary>
            Sends the entity to the provided connection without respawning it on the server or the unaffected clients.
            </summary>
            <remarks>
            This is useful for sending entities to newly connecing clients.
            </remarks>
            <param name="conn">The connection to send the entity to.</param>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.SetPos(UnityEngine.Vector3)">
            <summary>
            Sets the position of the entity and sends it to all ready clients.
            </summary>
            <param name="position">The position to set the entity to.</param>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.SetRot(UnityEngine.Quaternion)">
            <summary>
            Sets the rotation of the entity and sends it to all ready clients.
            </summary>
            <param name="rotation">The rotation to set the entity to.</param>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.SetParent(DuneNet.Shared.Entities.BaseEntity)">
            <summary>
            Sets the parent of the entity and sends it to all ready clients.
            </summary>
            <param name="newParent">The entity the parent will be se to.</param>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.OnNetUpdate">
            <summary>
            Overridable method called once every network update. 
            </summary>
            <remarks>
            How often this method gets called depends on the network tickrate of the entity (by default, 33 times per second).
            This method is called before any synchronization takes place.
            The entity should update its Networked Variables here since this is the fastest they will be synchronized.
            </remarks>
        </member>
        <member name="M:DuneNet.Server.Entities.Entity.OnSetUMessage(System.String)">
            <summary>
            Overridable method called when the authoritative client updates any of the User Messages of the entity.
            </summary>
            <remarks>
            For entities with a large amount of User Messages, it is advisable to switch over varName.
            </remarks>
            <param name="varName">The name of the User Message that was received from the server.</param>
        </member>
        <member name="T:DuneNet.Server.Modules.NewConnectionModule">
            <inheritdoc />
            <summary>
            A basic DuneModule to handle new connections from clients.
            </summary>
        </member>
    </members>
</doc>
